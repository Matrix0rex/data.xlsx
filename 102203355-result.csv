import sys
import pandas as pd
import numpy as np

def validate_inputs(args):
    if len(args) != 5:
        raise ValueError("Incorrect number of arguments. Usage: python <program.py> <InputDataFile> <Weights> <Impacts> <ResultFileName>")

    input_file, weights, impacts, result_file = args[1], args[2], args[3], args[4]

    try:
        weights = list(map(float, weights.split(',')))
    except ValueError:
        raise ValueError("Weights must be numeric and separated by commas.")

    impacts = impacts.split(',')
    if not all(i in ['+', '-'] for i in impacts):
        raise ValueError("Impacts must be '+' or '-' and separated by commas.")

    if len(weights) != len(impacts):
        raise ValueError("The number of weights and impacts must be the same.")

    return input_file, weights, impacts, result_file

def topsis(input_file, weights, impacts, result_file):
    try:
        data = pd.read_csv(input_file)
    except FileNotFoundError:
        raise FileNotFoundError(f"File '{input_file}' not found.")

    if data.shape[1] < 3:
        raise ValueError("Input file must contain at least three columns.")

    try:
        numeric_data = data.iloc[:, 1:].astype(float)
    except ValueError:
        raise ValueError("From the second to last columns, all values must be numeric.")

    if len(weights) != numeric_data.shape[1] or len(impacts) != numeric_data.shape[1]:
        raise ValueError("The number of weights, impacts, and numeric columns must be the same.")

    # Normalize the data
    normalized_data = numeric_data / np.sqrt((numeric_data**2).sum())

    # Weighted normalized data
    weighted_data = normalized_data * weights

    # Determine ideal best and worst
    ideal_best = []
    ideal_worst = []
    for i, impact in enumerate(impacts):
        if impact == '+':
            ideal_best.append(weighted_data.iloc[:, i].max())
            ideal_worst.append(weighted_data.iloc[:, i].min())
        else:
            ideal_best.append(weighted_data.iloc[:, i].min())
            ideal_worst.append(weighted_data.iloc[:, i].max())

    # Calculate distances to ideal best and worst
    distances_best = np.sqrt(((weighted_data - ideal_best)**2).sum(axis=1))
    distances_worst = np.sqrt(((weighted_data - ideal_worst)**2).sum(axis=1))

    # Calculate TOPSIS score
    topsis_score = distances_worst / (distances_best + distances_worst)

    # Add results to the original data
    data['Topsis Score'] = topsis_score
    data['Rank'] = topsis_score.rank(ascending=False).astype(int)

    # Save the result to the output file
    data.to_csv(result_file, index=False)

if __name__ == "__main__":
    try:
        input_file, weights, impacts, result_file = validate_inputs(sys.argv)
        topsis(input_file, weights, impacts, result_file)
        print(f"Results saved to '{result_file}'.")
    except Exception as e:
        print(f"Error: {e}")
